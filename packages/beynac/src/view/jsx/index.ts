/**
 * @module
 * JSX for Hono.
 */

import type { DOMAttributes } from "./base";
import {
	cloneElement,
	Fragment,
	isValidElement,
	jsx,
	memo,
	reactAPICompatVersion,
} from "./base";
import { Children } from "./children";
import { ErrorBoundary } from "./components";
import { createContext, useContext } from "./context";
import {
	createRef,
	forwardRef,
	startTransition,
	startViewTransition,
	use,
	useActionState,
	useCallback,
	useDebugValue,
	useDeferredValue,
	useEffect,
	useId,
	useImperativeHandle,
	useInsertionEffect,
	useLayoutEffect,
	useMemo,
	useOptimistic,
	useReducer,
	useRef,
	useState,
	useSyncExternalStore,
	useTransition,
	useViewTransition,
} from "./hooks";
import { Suspense } from "./streaming";

export {
	reactAPICompatVersion as version,
	jsx,
	memo,
	Fragment,
	Fragment as StrictMode,
	isValidElement,
	jsx as createElement,
	cloneElement,
	ErrorBoundary,
	createContext,
	useContext,
	useState,
	useEffect,
	useRef,
	useCallback,
	useReducer,
	useId,
	useDebugValue,
	use,
	startTransition,
	useTransition,
	useDeferredValue,
	startViewTransition,
	useViewTransition,
	useMemo,
	useLayoutEffect,
	useInsertionEffect,
	createRef,
	forwardRef,
	useImperativeHandle,
	useSyncExternalStore,
	type useActionState,
	type useOptimistic,
	Suspense,
	Children,
	type DOMAttributes,
};

export default {
	version: reactAPICompatVersion,
	memo,
	Fragment,
	StrictMode: Fragment,
	isValidElement,
	createElement: jsx,
	cloneElement,
	ErrorBoundary,
	createContext,
	useContext,
	useState,
	useEffect,
	useRef,
	useCallback,
	useReducer,
	useId,
	useDebugValue,
	use,
	startTransition,
	useTransition,
	useDeferredValue,
	startViewTransition,
	useViewTransition,
	useMemo,
	useLayoutEffect,
	useInsertionEffect,
	createRef,
	forwardRef,
	useImperativeHandle,
	useSyncExternalStore,
	useActionState,
	useOptimistic,
	Suspense,
	Children,
};

export type { JSX } from "./intrinsic-elements";
export type * from "./types";
